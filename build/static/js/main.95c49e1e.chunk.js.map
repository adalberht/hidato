{"version":3,"sources":["components/HidatoCell.js","components/HidatoGrid.js","components/App.js","serviceWorker.js","index.js"],"names":["HidatoCell","props","react_default","a","createElement","key","concat","row","col","className","disabled","fromInput","val","style","textAlign","border","visibility","visible","backgroundColor","transition","fontSize","color","value","onChange","e","preventDefault","target","num","Number","isInteger","callback","window","alert","generateInitialPoints","startX","endX","map","_ref","Array","fill","_","getSetOfInputtedValues","points","Set","point","solveHidato","_callee2","spec","uniqueValues","valid","response","mat","regenerator_default","wrap","_context2","prev","next","reduce","curr","nonEmptyVisiblePoints","filter","getNonEmptyVisiblePoints","size","length","sort","b","abrupt","axios","post","headers","Content-Type","Access-Control-Allow-Origin","Access-Control-Allow-Methods","Access-Control-Allow-Headers","sent","console","log","data","forEach","i","Object","objectSpread","t0","stop","HidatoGrid","_useState","useState","_useState2","slicedToArray","setState","Fragment","display","gridTemplateColumns","gridTemplateRows","cell","components_HidatoCell","assign","newVal","newPoints","r","c","alignItems","justifyContent","width","marginTop","onClick","asyncToGenerator","mark","_callee","_context","marginLeft","App","components_HidatoGrid","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95c49e1e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction HidatoCell(props) {\r\n  function getBackgroundColor() {\r\n    if (props.val == 1 || props.val == 40) {\r\n      return \"#d50000\";\r\n    } else if (props.fromInput && props.val !== \"\") {\r\n      return \"#4dd0e1\";\r\n    }\r\n    return \"white\";\r\n  }\r\n\r\n  function getFontColor() {\r\n    if (props.val == 1 || props.val == 40) {\r\n      return \"white\";\r\n    } else if (props.fromInput) {\r\n      return \"#424242\";\r\n    } else {\r\n      return \"green\";\r\n    }\r\n  }\r\n  return (\r\n    <input\r\n      key={`hidato-cell-${props.row}-${props.col}`}\r\n      className=\"hidato-cell\"\r\n      disabled={!props.fromInput && props.val !== \"\"}\r\n      style={{\r\n        textAlign: \"center\",\r\n        border: \"1px solid gray\",\r\n        visibility: props.visible ? \"visible\" : \"hidden\",\r\n        backgroundColor: getBackgroundColor(),\r\n        transition: \"all 0.5s\",\r\n        fontSize: \"1.2rem\",\r\n        color: getFontColor()\r\n      }}\r\n      value={props.val}\r\n      onChange={e => {\r\n        e.preventDefault();\r\n        const val = e.target.value;\r\n        const num = Number(e.target.value);\r\n\r\n        if (val === \"\" || (Number.isInteger(num) && num >= 1 && num <= 40)) {\r\n          props.callback(e.target.value);\r\n        } else {\r\n          window.alert(\r\n            \"Input must be positive number between 0 and 40 (inclusive)\"\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HidatoCell;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport HidatoCell from \"./HidatoCell\";\r\n\r\nfunction generateInitialPoints() {\r\n  const pointRangeForEveryRow = [\r\n    { startX: 0, endX: 4 },\r\n    { startX: 0, endX: 4 },\r\n    { startX: 0, endX: 5 },\r\n    { startX: 0, endX: 5 },\r\n    { startX: 0, endX: 6 },\r\n    { startX: 2, endX: 6 },\r\n    { startX: 4, endX: 7 },\r\n    { startX: 6, endX: 7 }\r\n  ];\r\n  return pointRangeForEveryRow.map(({ startX, endX }, row) =>\r\n    new Array(8).fill(0).map((_, col) => ({\r\n      row: row,\r\n      col: col,\r\n      visible: col >= startX && col <= endX,\r\n      val: \"\",\r\n      fromInput: false\r\n    }))\r\n  );\r\n}\r\n\r\nfunction getSetOfInputtedValues(points) {\r\n  return new Set(points.map(point => point.val));\r\n}\r\n\r\nasync function solveHidato(points) {\r\n  function getNonEmptyVisiblePoints(points) {\r\n    return points.reduce((prev, curr) => {\r\n      const nonEmptyVisiblePoints = curr.filter(point => {\r\n        return point.visible && point.val != \"\";\r\n      });\r\n      return prev.concat(\r\n        nonEmptyVisiblePoints.map(point => ({\r\n          row: point.row + 1, // 1-indexed in back end\r\n          col: point.col + 1, // 1-indexed in back end\r\n          val: Number(point.val)\r\n        }))\r\n      );\r\n    }, []);\r\n  }\r\n\r\n  const spec = getNonEmptyVisiblePoints(points);\r\n\r\n  const uniqueValues = getSetOfInputtedValues(spec);\r\n\r\n  let valid = true;\r\n  if (uniqueValues.size !== spec.length) {\r\n    window.alert(\"Input should be unique. There is duplicate element\");\r\n    valid = false;\r\n  }\r\n\r\n  spec.sort((a, b) => a.val - b.val);\r\n\r\n  if (spec.length < 15) {\r\n    window.alert(\"You should provide a minimum of 15 numbers\");\r\n    valid = false;\r\n  }\r\n\r\n  if (spec[0].val !== 1 || spec[spec.length - 1].val !== 40) {\r\n    window.alert(\"Please input 1 and 40\");\r\n    valid = false;\r\n  }\r\n\r\n  if (!valid) return points;\r\n\r\n  try {\r\n    const response = await axios.post(\"http://localhost:8000/solve\", spec, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Methods\":\r\n          \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\r\n        \"Access-Control-Allow-Headers\": \"Origin, Content-Type, X-Auth-Token\"\r\n      }\r\n    });\r\n    console.log(\"Get response: \");\r\n    console.log(response);\r\n    const mat = new Array(8).fill(0).map(() => new Array(8).fill(0));\r\n    response.data.forEach((point, i) => {\r\n      mat[point.row - 1][point.col - 1] = point.val;\r\n    });\r\n\r\n    console.log(mat);\r\n    console.log(points);\r\n    points = points.map(row =>\r\n      row.map(point => ({\r\n        ...point,\r\n        val: mat[point.row][point.col]\r\n      }))\r\n    );\r\n    return points;\r\n  } catch (e) {\r\n    window.alert(\"Error: \" + e);\r\n    return points;\r\n  }\r\n}\r\n\r\nfunction HidatoGrid() {\r\n  const [points, setState] = useState(generateInitialPoints());\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(8, 2.5rem)\",\r\n          gridTemplateRows: \"repeat(8, 2.5rem)\"\r\n        }}\r\n      >\r\n        {points.reduce(\r\n          (prev, curr) =>\r\n            prev.concat(\r\n              curr.map(cell => (\r\n                <HidatoCell\r\n                  key={`hidato-cell-${cell.row}-${cell.col}`}\r\n                  callback={newVal => {\r\n                    const newPoints = points.map((row, r) =>\r\n                      r !== cell.row\r\n                        ? row\r\n                        : row.map((col, c) =>\r\n                            c !== cell.col\r\n                              ? col\r\n                              : {\r\n                                  ...col,\r\n                                  val: newVal,\r\n                                  fromInput: true\r\n                                }\r\n                          )\r\n                    );\r\n                    setState(newPoints);\r\n                  }}\r\n                  {...cell}\r\n                />\r\n              ))\r\n            ),\r\n          []\r\n        )}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          width: \"100%\",\r\n          marginTop: \"1rem\"\r\n        }}\r\n      >\r\n        <button\r\n          onClick={async () => {\r\n            let newPoints = await solveHidato(points, setState);\r\n            setState(newPoints);\r\n          }}\r\n        >\r\n          Solve\r\n        </button>\r\n        <button\r\n          style={{ marginLeft: \"1rem\" }}\r\n          onClick={() => setState(generateInitialPoints())}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default HidatoGrid;\r\n","import React from \"react\";\n\nimport HidatoGrid from \"./HidatoGrid\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Hidato Solver</h1>\n        <h2>Standard Square-shaped</h2>\n      </header>\n      <HidatoGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}